input {
  # 파일로 부터 스트림 이벤트를 수신합니다. 기본적으로 `tail -0F` 동작과 유사합니다.
  file {
    path => "/var/log/vsftpd*"
  }
}

filter {
  # 전달받은 비정형 텍스트를 구조적으로 파싱합니다.
  grok {
    patterns_dir => ["/etc/logstash/conf.d/patterns"]
    match => {
      "message" => [
        "%{VSFTPD_CONNECT}$",
        "%{VSFTPD_LOGIN}$",
        "%{VSFTPD_TRANSFER}$",
        "%{VSFTPD_DELETE}$",
        "%{VSFTPD_RENAME}$"
      ]
    }
  }
  # 파싱된 필드를 필터링 합니다.
  if !([vsftpd_action] in ["LOGIN", "UPLOAD", "DOWNLOAD", "DELETE", "RENAME"]) {
    drop{}
  }
  # 파싱된 필드로 부터 타임스탬프를 생성합니다.
  date {
    # `Thu Jun  1 10:34:45 2017` ( 1 space before day) or `Thu Jun 11 10:34:45 2017`
    match => [ "datetime" , "EEE MMM  d HH:mm:ss yyyy" , "EEE MMM dd HH:mm:ss yyyy" ]
  }
  # Key/Value 사전으로부터 값을 검색하거나 변환합니다. 이 예제에서는 지정된 유저의 개인정보를 확인하기 위해 사용합니다.
  translate {
    dictionary_path => "/etc/logstash/conf.d/users/smilegate.yml"
    field => "vsftpd_user"
    destination => "@user_info"
  }
  # ruby 코드를 실행합니다. 이 예제에서는 유저 정보를 기반으로 SMS 키 생성 및 Email 지정을 수행합니다.
  # {SMS_ACCOUNT}: SMS API 사용자 계정
  # {SMS_PASSWORD}: SMS API 암호
  # {SMS_BACK_NUMBER}: SMS 회신 번호
  # {FROM_EMAIL_ADDRESS}: Email 회신 주소
  ruby {
    code => "require 'digest'
             require 'date'
             t = DateTime.strptime(event.get('@timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').to_time
             event.set('@sms_date', t.strftime('%Y-%m-%d'))
             event.set('@sms_time', t.strftime('%H:%M:%S'))
             sms_key = Digest::MD5.hexdigest('{SMS_PASSWORD}:' + t.strftime('%Y%m%d%H') + ':{SMS_ACCOUNT}')
             # ex) sms_key = Digest::MD5.hexdigest('my_passwd:' + t.strftime('%Y%m%d%H') + ':my_accout')
             event.set('@sms_key', sms_key)
             event.set('@sms_id', '{SMS_ACCOUNT}')
             event.set('@sms_back', '{SMS_BACK_NUMBER}')

             userInfo = event.get('@user_info').to_s.split('/')

             event.set('@email_to', userInfo[0])
             event.set('@sms_num', userInfo[1])
             event.set('@email_from', '{FROM_EMAIL_ADDRESS}')
             event.set('@csv_name', 'vsftp_event.csv')"
  }
}

output {
  if [vsftpd_action] =~ "LOGIN" {
    # 파싱된 필드를 인코딩 하여 HTTP로 전달합니다.
    http {
      url => "http://sms.bizspring.co.kr/sms_service.tsp?cus_id=%{@sms_id}&cus_key=%{@sms_key}&phone_num=%{@sms_num}&call_back_num=%{@sms_back}&str_msg=Try%20FTP%20Login%3A%20%{vsftpd_action_status}%0ADATE%3A%20%{@sms_date}%20%{@sms_time}%0AUSER%3A%20%{vsftpd_user}%20(%{vsftpd_client_ip})"
      http_method => "get"
    }
    # 파싱된 필드를 인코딩 하여 `/var/log/logstash/` 경로에 CSV 형식으로 기록합니다.
    file {
      path => "/var/log/logstash/%{@csv_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},,,"}
    }
  }
  else if [vsftpd_action] in ["UPLOAD", "DOWNLOAD"] {
    # 파싱된 필드를 인코딩 하여 메일로 전달합니다.
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nFile: %{vsftpd_file_path}\nSize: %{vsftpd_file_size} bytes"
    }
    file {
      path => "/var/log/logstash/%{@csv_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},%{vsftpd_file_size},"}
    }
  }
  else if [vsftpd_action] =~ "DELETE" {
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nFile: %{vsftpd_file_path}"
    }
    file {
      path => "/var/log/logstash/%{@csv_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},,"}
    }
  }
  else if [vsftpd_action] =~ "RENAME" {
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nfromFile: %{vsftpd_file_path}\ntoFile: %{vsftpd_file_rename_path}"
    }
    file {
      path => "/var/log/logstash/%{@csv_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},,%{vsftpd_file_rename_path}"}
    }
  }
}