input {
  # 파일로 부터 스트림 이벤트를 수신합니다. 기본적으로 `tail -0F` 동작과 유사합니다.
  file {
    path => "/var/log/vsftpd.log"
  }
}

filter {
  # 전달받은 비정형 텍스트를 구조적으로 파싱합니다.
  grok {
    patterns_dir => ["/etc/logstash/conf.d/patterns"]
    match => {
      "message" => "%{VSFTPD_LOGIN}"
    }
    timeout_millis => 1000
  }
  # 파싱된 필드를 필터링 합니다.
  if !([vsftpd_action] in ["LOGIN", "UPLOAD", "DOWNLOAD", "DELETE", "RENAME", "RMDIR"]) {
    drop{}
  }
  
  if [vsftpd_action] in ["UPLOAD", "DOWNLOAD"] {
    grok {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      match => {
        "message" => "%{VSFTPD_TRANSFER_PARAMS}"
      }
      timeout_millis => 1000
    }
    if ![vsftpd_file_size] {
      mutate { add_field => { "vsftpd_file_size" => "0" } }
    }
    if ![vsftpd_file_transfer_speed] {
      mutate { add_field => { "vsftpd_file_transfer_speed" => "0" } }
    }
  }
  else if [vsftpd_action] in ["DELETE", "RMDIR"] {
    grok {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      match => {
        "message" => "%{VSFTPD_DELETE_PARAMS}"
      }
      timeout_millis => 1000
    }
  }
  else if [vsftpd_action] =~ "RENAME" {
    grok {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      match => {
        "message" => "%{VSFTPD_RENAME_PARAMS}"
      }
      timeout_millis => 1000
    }
  }
  
  # 파싱된 필드로 부터 타임스탬프를 생성합니다.
  date {
    # `Thu Jun  1 10:34:45 2017` ( 1 space before day) or `Thu Jun 11 10:34:45 2017`
    match => [ "datetime" , "EEE MMM  d HH:mm:ss yyyy" , "EEE MMM dd HH:mm:ss yyyy" ]
  }
  mutate {
    add_field => {
      "sms_id" => "sms_id"
      "sms_passwd" => "sms_passwd"
      "sms_back" => "sms_back"
      "email_from" => "email_from"
      "@logging_name" => "vsftp_event.csv"
    }
  }
  # Key/Value 사전으로부터 값을 검색하거나 변환합니다. 이 예제에서는 통지 설정과 유저의 개인정보를 확인하기 위해 사용합니다.
  translate {
    dictionary_path => "/etc/logstash/conf.d/props/vsftp-props.yml"
    field => "email_from"
    destination => "@email_from"
  }
  translate {
    dictionary_path => "/etc/logstash/conf.d/props/vsftp-users.yml"
    field => "vsftpd_user"
    destination => "@email_to"
  }
  # ruby 코드를 실행합니다. 이 예제에서는 유저 정보를 기반으로 SMS 키 생성 및 Email 지정을 수행합니다.
  ruby {
    code => "
      require 'date'

      t = DateTime.strptime(event.get('@timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').to_time
      sms_date = t.strftime('%Y-%m-%d')
      sms_time = t.strftime('%H:%M:%S')
      event.set('@sms_date', sms_date)
      event.set('@sms_time', sms_time)
    "
  }
}

output {
  if [vsftpd_action] =~ "LOGIN" {
    # 파싱된 필드를 인코딩 하여 메일로 전달합니다.
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nStatus: %{vsftpd_action_status}"
    }
    # 파싱된 필드를 인코딩 하여 `/var/log/logstash/` 경로에 CSV 형식으로 기록합니다.
    file {
      path => "/var/log/logstash/%{@logging_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},,,"}
    }
  }
  else if [vsftpd_action] in ["UPLOAD", "DOWNLOAD"] {
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nFile: %{vsftpd_file_path}\nSize: %{vsftpd_file_size} bytes"
    }
    file {
      path => "/var/log/logstash/%{@logging_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},%{vsftpd_file_size},"}
    }
  }
  else if [vsftpd_action] in ["DELETE", "RMDIR"] {
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nFile: %{vsftpd_file_path}"
    }
    file {
      path => "/var/log/logstash/%{@logging_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},,"}
    }
  }
  else if [vsftpd_action] =~ "RENAME" {
    email {
      to => "%{@email_to}"
      from => "%{@email_from}"
      subject => "Notification FTP Event from GSNeotek"
      body => "This email was sent from GS Neotek.\nAn event has occurred in the FTP service.\n\nDate: %{@sms_date} %{@sms_time}\nUser: %{vsftpd_user} (%{vsftpd_client_ip})\nAction: %{vsftpd_action}\nfromFile: %{vsftpd_file_path}\ntoFile: %{vsftpd_file_rename_path}"
    }
    file {
      path => "/var/log/logstash/%{@logging_name}"
      codec => line { format => "%{@sms_date}T%{@sms_time},%{vsftpd_user},%{vsftpd_client_ip},%{vsftpd_action},%{vsftpd_action_status},%{vsftpd_file_path},,%{vsftpd_file_rename_path}"}
    }
  }
}